(ns tests.basilisp-blender.integration.control-panel-test
  (:import logging
           os
           os.path
           socket
           tempfile
           tests.basilisp_blender.integration.integ_utils
           time)
  (:require [basilisp.string :as str]
            [basilisp.test :refer [deftest are is testing]]
            [tests.basilisp-blender.integration.bpy-utils-test :as but]
            [tests.basilisp-blender.integration.test-utils :as tu :refer [deftest-ui]]))

(deftest-ui panel-control-test
  (but/with-blender-nrepl-run

    (testing "ctrl creation"
      (let [result (but/with-client-eval!
                     (require '[basilisp-blender.control-panel :as p])
                     (import os sys)
                     ;; these var are available for all tests in the
                     ;; with-blender-nrepl-run session
                     (def ctrl-panel (p/nrepl-control-panel-create!))
                     (def ctrl-test (:ctrl ctrl-panel))
                     (def ctrl-destroy! (:destroy! ctrl-panel))

                     @ctrl-test)]
        (is (= {:res {:status [:ready]}} result)))

      (is (= {:result {:host nil :status [:ready] :port nil :project-dir nil}}
             (:res (but/with-client-eval!
                     (p/ctrl-do! ctrl-test :info-get))))))

    (testing "server start/stop without options"
      (let [{:keys [res] :as _ret} (but/with-client-eval!
                                     [(p/ctrl-do! ctrl-test :server-toggle!)
                                      (p/ctrl-do! ctrl-test :info-get)])
            [[toggle-state toggle-msg :as toggle] info] (map :result res)]

        (is (= :started toggle-state))
        (let [{:keys [port]} info]
          (is (= (str "nrepl://127.0.0.1:" port) toggle-msg) toggle)
          (is (= {:host "127.0.0.1", :status [:serving], :project-dir nil :port port} info))

          ;; toggle -- server stop
          (let [{:keys [res] :as ret} (but/with-client-eval!
                                        [(p/ctrl-do! ctrl-test :server-toggle!)
                                         (p/ctrl-do! ctrl-test :info-get)])
                [[toggle-state toggle-msg :as toggle] info] (map :result res)]
            (is (= :stopped toggle-state) ret)
            (is (= (str "nrepl://127.0.0.1:" port) toggle-msg) toggle)
            (is (= {:host nil :status [:ready] :port nil :project-dir nil} info))))))

    (testing "server host option"
      (let [{:keys [res] :as ret} (but/with-client-eval!
                                    [(p/ctrl-do! ctrl-test :server-toggle! {:host "0.0.0.0"})
                                     (p/ctrl-do! ctrl-test :info-get)])
            [[toggle-state toggle-msg :as toggle] info] (map :result res)]
        (is (= :started toggle-state))
        (let [{:keys [port]} info]
          (is (= (str "nrepl://0.0.0.0:" port) toggle-msg) [toggle info])
          (is (= {:host "0.0.0.0", :status [:serving]} (select-keys info [:host :status]) info))

          ;; toggle -- server stop
          (let [{:keys [res] :as ret} (but/with-client-eval!
                                        [(p/ctrl-do! ctrl-test :server-toggle!)
                                         (p/ctrl-do! ctrl-test :info-get)])
                [[toggle-state toggle-msg :as toggle] info] (map :result res)]
            (is (= :stopped toggle-state))
            (is (= (str "nrepl://0.0.0.0:" port) toggle-msg) toggle)
            (is (= {:host nil :status [:ready] :port nil :project-dir nil} info))))))

    (testing "server port option"
      (let [{:keys [res] :as _ret} (but/with-client-eval!
                                     [(p/ctrl-do! ctrl-test :server-toggle! {:port -1})
                                      (p/ctrl-do! ctrl-test :info-get)])]
        (is [{:error
              (:server-make-error
               [:type-of
                "<class 'OverflowError'>"
                "OverflowError('bind(): port must be 0-65535.')"])}
             {:result {:port nil, :host nil, :status [:ready], :project-dir nil}}] res)))

    (testing "Basilisp project-dir option"
      (let [{:keys [exc res] :as _ret}
            (but/with-client-eval!
              (import os
                      tempfile)
              (with [tmpdir (tempfile/TemporaryDirectory)]
                    {:actions
                     [{:result (doall (seq sys/path))}
                      {:result (os/getcwd)}
                      (p/ctrl-do! ctrl-test :server-toggle! {:project-dir tmpdir})
                      (p/ctrl-do! ctrl-test :info-get)
                      {:result (doall (seq sys/path))}
                      {:result (os/getcwd)}
                      {:result (set (os/listdir tmpdir))}
                      (p/ctrl-do! ctrl-test :server-toggle!)
                      {:result (doall (seq sys/path))}
                      {:result (os/getcwd)}]

                     :tmpdir tmpdir}))

            {:keys [actions tmpdir]} res

            [sys-path-before cwd-before [toggle-state]
             {:keys [project-dir] :as _info} sys-path-during cwd-during files-set
             [toggle-state2] sys-path-after cwd-after]
            (map :result actions)]

        (is (nil? exc) exc)
        (is (= :started toggle-state))
        (is (= tmpdir project-dir) res)
        (is (= :stopped toggle-state2))

        (is (= #{".nrepl-port" "basilisp.edn" "scratch.lpy"} files-set))

        ;; the project dir was added to the sys.path during the session
        (is (= (conj (vec sys-path-before) project-dir) sys-path-during))
        ;; the sys.path was restored after the session
        (is (= sys-path-after sys-path-before))
        ;; the CWD was changed during the session
        (is (not= cwd-before cwd-during))
        (is (= cwd-during tmpdir))
        ;; the CWD was restored after the session
        (is (= cwd-before cwd-after))))

    (testing "destroying panel"
      (let [{:keys [res]} (but/with-client-eval!
                            [(p/ctrl-do! ctrl-test :server-toggle!)
                             (ctrl-destroy!)
                             (p/ctrl-do! ctrl-test :info-get)])
            [[toggle-state] _ {:keys [status] :as _info}] (map :result res)]
        (is (= :started toggle-state))
        (is (= [:ready] status) _info)))))

#_(tu/pp-code (panel-control-test))
