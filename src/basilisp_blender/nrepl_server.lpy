;; adapted from
;; https://github.com/basilisp-lang/basilisp/blob/b4d9c2d6ed1aaa9ba2f4b1dc0e8073813aab1315/src/basilisp/contrib/nrepl_server.lpy
(ns basilisp-blender.nrepl-server
  "A port of `nbb <https://github.com/babashka/nbb>`_'s nREPL server implementation to basilisp.

  Additions:

  - Client requests can be collected into a map for asynchronous
  processing outside the current execution thread."
  (:require [basilisp.contrib.bencode :as bc]
            [basilisp.string :as str]
            [basilisp-blender.utils :as u])
  (:import basilisp.logconfig
           contextlib
           logging
           os
           queue
           socket
           socketserver
           sys
           threading
           urllib
           traceback))

(def logger
  "The logger for this namespace."
  (logging/getLogger (namespace ::)))

(defmacro ^:private trace [& values]
  `(when (.isEnabledFor logger basilisp.logconfig/TRACE)
     (.log logger basilisp.logconfig/TRACE (str/join " " [~@values]))))
(defmacro ^:private debug [& values]
  `(when (.isEnabledFor logger logging/DEBUG)
    (.debug logger (str/join " " [~@values]))))
(defmacro ^:private info [& values]
  `(when (.isEnabledFor logger logging/INFO)
    (.info logger (str/join " " [~@values]))))
(defmacro ^:private warn [& values]
  `(when (.isEnabledFor logger logging/WARNING)
     (.warning logger (str/join " " [~@values]))))
(defmacro ^:private err [& values]
  `(.error logger (str/join " " [~@values])))

(definterface ^:private IStdOut
  ;; Pythonic interface for creating `sys/stdout` like File objects.
  (flush [])
  (write [value]))

(deftype ^:private StreamOutFn [out-fn]
  ;; A type to use as replacement binding for writing to `sys/stdout`
  ;; stream, so that the output ``value`` is passed to ``out-fn``
  ;; instead.
  IStdOut
  (flush [_self]
    nil)
  (write [_self value]
    (out-fn value)))

(defn- response-for-mw [handler]
  (fn [{:keys [id session] :as request} response]
    (let [response (cond-> (assoc response
                                  "id" id)
                     session (assoc "session" session))]
      (handler request response))))

(defn- coerce-request-mw [handler]
  (fn [request send-fn]
    (handler (update request :op keyword) send-fn)))

(defn- log-request-mw [handler]
  (fn [request send-fn]
    (debug :request (dissoc request :client*))
    (handler request send-fn)))

(defn- log-response-mw [handler]
  (fn [request response]
    (debug :response response)
    (handler request response)))

(declare ops)

(defn- handle-describe [request send-fn]
  (let [basilisp-version   (-> (zipmap ["major" "minor" "incremental"] *basilisp-version*)
                               (assoc "version-string" (str/join "." *basilisp-version*)))
        python-version     (-> (zipmap ["major" "minor" "incremental"] *python-version*)
                               (assoc "version-string" (str/join "." *python-version*)))]
    (send-fn request
             {"versions" {"basilisp" basilisp-version
                          "python"   python-version}
              "ops"      (zipmap (map name (keys ops)) (repeat {}))
              "status"   ["done"]})))

(defn- format-value [_nrepl-pprint _pprint-options value]
  (pr-str value))

(defn- send-value [request send-fn v]
  (let [{:keys [client*]} request
        {:keys [*1 *2]}   @client*
        [v opts]          v
        ns                (:ns opts)]
    (swap! client* assoc :*1 v :*2 *1 :*3 *2)
    (let [v (format-value (:nrepl.middleware.print/print request)
                          (:nrepl.middleware.print/options request)
                          v)]
      (send-fn request {"value" (str v)
                        "ns"    (str ns)}))))

(defn- handle-error [send-fn request e]
  (let [{:keys [client* ns]} request
        data                 (ex-data e)
        message              (or (:message data) (str e))]
    (swap! client* assoc :*e e)
    (send-fn request {"err" (str message)})
    (send-fn request {"ex"     (traceback/format-exc)
                      "status" ["eval-error"]
                      "ns"     ns})))

(defn- do-handle-eval
  "Evaluate the ``request`` ``code`` of ``file`` in the ``ns`` namespace
  according to the current state of the ``client*`` and sends its
  result with ``send-fn``.

  The result sent is either the last evaluated value or exception,
  followed by the \"done\" status.

  If ``ns`` is not provided, then it uses the ``client``'s :eval-ns as
  the evaluation namespace. The latter is updated with the current
  namespace after evaluation is completed.

  It binds the `*1`, `*2`, `*3` and `*e` variables for evaluation from
  the corresponding ones found in ``client*``, and updates the latter
  according to the result."
  [{:keys [client* code ns file column line] :as request} send-fn]
  (let [{:keys [*1 *2 *3 *e eval-ns]} @client*
        out-stream                    (StreamOutFn #(send-fn request {"out" %}))
        ctx                           (basilisp.lang.compiler.CompilerContext. (or file "<nREPL Input>"))
        eval-ns                       (if ns
                                        (create-ns (symbol ns))
                                        eval-ns)]
    (binding [*ns*  eval-ns
              *out* out-stream
              *1    *1
              *2    *2
              *3    *3
              *e    *e]
      (try
        (let [result (last
                      (for [form (read-seq (cond-> {}
                                             line   (assoc :init-line   line)
                                             column (assoc :init-column column))
                                           (io/StringIO code))]
                        (basilisp.lang.compiler/compile-and-exec-form form
                                                                      ctx
                                                                      *ns*)))]
          (send-value request send-fn [result {:ns (str *ns*)}]))
        (catch python/Exception e
          (debug :eval-exception e)
          (let [msg (->> (basilisp.lang.exception/format_exception e
                                                                   ** :disable-color true)
                         (str/join ""))]
            (handle-error send-fn (assoc request :ns (str *ns*)) msg)))
        (finally
          (swap! client* assoc :eval-ns *ns*)
          (send-fn request {"ns"     (str *ns*)
                            "status" ["done"]}))))))

(defn- handle-eval [request send-fn]
  (do-handle-eval request send-fn))

(defn- handle-clone [request send-fn]
  (send-fn request {"new-session" (str (random-uuid))
                    "status" ["done"]}))

(defn- handle-close [request send-fn]
  (send-fn request {"status" ["done"]}))

(defn- handle-classpath [_request _send-fn]
  (throw (python/NotImplementedError)))

(defn- handle-macroexpand [_request _send-fn]
  (throw (python/NotImplementedError)))

(defn- symbol-identify
  "Return a vector of information about ``symbol-str`` as might be
  resolved in ``resolve-ns``.

  The returned vector can be one of

  [:keyword KEYWORD] the ``symbol-str`` is this KEYWORD.

  [:nil FORM] the ``symbol-str`` is this nil FORM.

  [:special-form FORM] the ``symbol-str`` this special FORM.

  [:var VAR] the ``symbol-str`` is this VAR.

  [:error ERROR] there was this ERROR when trying to parse ``symbol-str``.

  [:other FORM] the ``symbol-str`` is of yet to be categorized FORM."
  [resolve-ns symbol-str]
  (let [reader               (io/StringIO symbol-str)
        {:keys [form error]} (try {:form (binding [*ns* resolve-ns]
                                           (read reader))}
                                  (catch python/Exception e
                                    (debug :symbol-identify-reader-error :input symbol-str :exception e)
                                    {:error (str e)}))]

    (cond
      error
      [:error error]

      (nil? form)
      [:nil form]

      (keyword? form)
      [:keyword form]

      (special-symbol? form)
      [:special-form form]

      :else
      (let [{:keys [var error]} (try {:var (ns-resolve resolve-ns form)}
                                     (catch python/Exception e
                                       {:error (str e)}))]
        (cond
          var   [:var var]
          error [:error error]
          :else [:other form])))))

(defn- forms-join [forms]
  (->> (map pr-str forms)
       (str/join \newline)))

(defn- handle-lookup
  "Look up :sym (CIDER) or :symbol (calva) from ``request`` in
  ``ns`` (or if not provided :eval-ns from ``client*``) and pass
  results to ``send-fn``.

  Serves both :eldoc and :info ``request`` :op's."
  [{:keys [ns client*] :as request} send-fn]
  (let [mapping-type      (-> request :op)
        {:keys [eval-ns]} @client*]
    (try
      (let [lookup-ns (if ns
                        (create-ns (symbol ns))
                        eval-ns)
            sym-str   (or (:sym request) ;; cider
                          (:symbol request) ;; calva
                          )

            [tp var-maybe] (symbol-identify lookup-ns sym-str)
            var-meta       (when (= tp :var) (meta var-maybe))

            {:keys [arglists doc file ns line col] symname :name} var-meta

            ref      (when (= tp :var) (var-get var-maybe))
            response (when symname
                       (case mapping-type
                         :eldoc (cond->
                                    {"eldoc"  (mapv #(mapv str %) arglists)
                                     "ns"     (str ns)
                                     "type"   (if (fn? ref)
                                                "function"
                                                "variable")
                                     "name"   (str symname)
                                     "status" ["done"]}
                                  doc (assoc "docstring" doc))
                         :info  {"doc"          doc
                                 "ns"           (str ns)
                                 "name"         (str symname)
                                 "file"         (if (os.path/isabs file)
                                                  (->> (urllib.parse/quote file)
                                                       (urllib.parse/urljoin "file:"))
                                                  file)
                                 "line"         line
                                 "column"       col
                                 "arglists-str" (forms-join arglists)
                                 "status"       ["done"]}))
            status   (if (and (nil? symname) (= mapping-type :eldoc) )
                       ["done" "no-eldoc"]
                       ["done"])]
        (trace :lookup :sym sym-str :doc doc :args arglists)
        (send-fn request (assoc response :status status)))
      (catch python/Exception e
        (let [status (cond->
                         ["done"]
                       (= mapping-type :eldoc)
                       (conj "no-eldoc"))]
          (send-fn
           request
           {"status" status "ex" (str e)}))))))

(defn- handle-load-file
  "Evaluate code in ``file`` from ``file-path`` and sends the result
  using the ``send-fn``."
  [{:keys [file _file-name file-path] :as request} send-fn]
  (do-handle-eval (assoc request
                         :file (or file-path "<unspecified filepath>")
                         :code file)
                  send-fn))

(defn- handle-complete
  "Calculates the name completion candidates for ``prefix`` (or
  ``req-symbol``) in namespace ``ns`` for ``client*`` and sends the
  completions using ``send-fn``.

  If ``ns`` is not provided, then the ``client*`` :eval-ns is used
  instead."
  [{:keys [client* ns prefix] req-symbol :symbol :as request} send-fn]
  (let [prefix            (or prefix req-symbol)
        {:keys [eval-ns]} @client*
        completion-ns     (if ns
                            (create-ns (symbol ns))
                            eval-ns)
        completions       (when-not (str/blank? prefix)
                            (seq (binding [*ns* completion-ns]
                                   (basilisp.lang.runtime/repl_completions prefix))))]
    (send-fn request {"completions" (->> (map str completions)
                                         sort
                                         (map (fn [completion]
                                                (let [[tp var-maybe] (symbol-identify completion-ns completion)]
                                                  (merge {:candidate completion}
                                                         (cond
                                                           (some #{tp} {:keyword :special-form})
                                                           {:type (name tp)}
                                                           (= tp :var)
                                                           (let [{:keys [ns macro]} (meta var-maybe)
                                                                 ref                (var-get var-maybe)
                                                                 ref-tp             (cond
                                                                                      macro "macro"
                                                                                      (fn? ref) "function"
                                                                                      :else "var")]
                                                             {:ns (str ns)
                                                              :type  ref-tp})
                                                           :else
                                                           {:candidate completion})))))
                                         vec)
                      "status" ["done"]})))

(def ops
  "A map of operations supported by the nREPL server (as keywords) to function
  handlers for those operations."
  {:eval      handle-eval
   :describe  handle-describe
   :info      handle-lookup     ;; cider-nrepl middleware
   :eldoc     handle-lookup     ;; cider-nrepl middleware
   :clone     handle-clone
   :close     handle-close
   :load-file handle-load-file
   :complete  handle-complete
   ;; :macroexpand handle-macroexpand
   ;; :classpath handle-classpath
   })

(defn- handle-request [{:keys [op] :as request} send-fn]
  (if-let [op-fn (get ops op)]
    (op-fn request send-fn)
    (do
      (warn "Unhandled operation" op)
      (send-fn request {"status" ["error" "unknown-op" "done"]}))))

(defn- make-request-handler [_]
  (-> handle-request
      coerce-request-mw
      log-request-mw))

(defn- make-send-fn [socket]
  (fn [_request response]
    (trace :sending (:id _request) :response-keys (keys response))
    (try
      (.sendall socket (bc/encode response))
      (catch python/TypeError e
        (err :bencode-cannot-decode (pr-str e))))))

(defn- make-reponse-handler [socket]
  (-> (make-send-fn socket)
      log-response-mw
      response-for-mw))

(defn- work*-make
  "Create and return an atom for a work* registry map to store the
  connected clients and their requests."
  []
  (atom {}))

(defn- work*-client-add!
  "Add a new client ``socket`` connection to the ``work*`` map and
  return the client's requests `queue/Queue` assigned to it."
  [work* socket]
  (let [q (queue/Queue)]
    (swap! work* assoc socket q)
    q))

(defn- on-connect! [tcp-req-handler opts]
  "Serve a new nREPL connection as found in ``tcp-req-handler``
   according to ``opts``.

  New client connections begin at the `user` namespace and it binds
  `*1`, `*2`, `*3` and `*e` to the ultimate, penultimate,
  antepenultimate evaluation result and last exception message
  respectively.

  ``opts`` is a map of options with the following optional keys.

  :recv-buffer-size The buffer size to use for incoming nREPL
  messages.

  :work* The work registry `atom` created with `work*-make`. If
  provided, client requests are queued under the client's socket in
  the registry instead of being executed immediately."
  (let [{:keys [recv-buffer-size work*]
         :or {recv-buffer-size 1024}} opts
        socket                        (.-request tcp-req-handler)
        handler                       (make-request-handler opts)
        response-handler              (make-reponse-handler socket)
        pending                       (atom nil)
        zero-bytes                    #b ""
        client-info                   (py->lisp (.getsockname socket))
        client*                       (atom {:*1 nil :*2 nil ;; keeps track of the latest
                                             :*3 nil :*e nil ;; evaluation results
                                             :eval-ns nil ;; the last eval ns
                                             })
        reqq                          (when work* (work*-client-add! work* socket))]
    (try
      (info "Connection accepted" :info client-info)
      ;; Need to load the `clojure.core` alias because cider uses it
      ;; to test for availability of features.
      (eval '(ns user (:require clojure.core)))
      (swap! client* assoc :eval-ns *ns*)
      (loop [data (.recv socket recv-buffer-size)]
        (if (= data zero-bytes)
          (do (info :socket-closing client-info)
              (.close socket))
          (let [data                   (if-let [p @pending]
                                         (let [b (+ p data)]
                                           (reset! pending nil)
                                           b)
                                         data)
                [requests unprocessed] (bc/decode-all data {:keywordize-keys true
                                                            :string-fn       #(.decode % "utf-8")})]
            (trace :requests requests)
            (when (not (str/blank? unprocessed))
              (reset! pending unprocessed))
            (doseq [request requests]
              (let [req-do #(try
                              (handler (assoc request :client* client*) response-handler)
                              (catch python/Exception e
                                (err :request-handler-unexpected-exception (pr-str e))))]
                (if reqq
                  (.put reqq req-do)
                  (req-do))))
            (recur (.recv socket recv-buffer-size)))))
      (catch python/Exception e
        (when socket (.close socket))
        (err :client-connection-error :client client-info :exception e)
        (err (traceback/format-exc))))))

(defn- clients-work-do!
  "Execute all client requests contained in ``work*``.

   ``work*`` is an atom containing a map where each key is a client's
  socket object, and each value is a `queue.Queue` of client request
  functions to be executed.

  It returns a map with the following key on error

  :error Contains the details of the error."
  [work*]
  (u/with-eprotect {:id :nrepl-clients-work-do-error :on-err-str #(err %)}
    (let [work @work*]
      (doseq [[client reqq] work]
        (while (not (.empty reqq))
          (u/with-eprotect {:id [:nrepl-clients-work-do-error :client client]
                            :on-err-str #(err %)}
            (debug ":async-work-req-do" :client client :qsize (.qsize reqq))
            (let [req (.get reqq)]
              (req)
              (debug ":async-work-req-done"))))))))

(defn server-shutdown!
  "Shut down the `server` and close any open client connections in the
  `work*` atom if present.

  It returns a map with the following key on error

  :error Contains the details of the error."
  [server work*]
  (info :server-shutting-down)
  (u/with-eprotect {:id :server-shutdown!-error :on-err-str #(err %)}
    (.shutdown server)
    (when work*
      (doseq [[socket work_] @work*]
        (when-not (= (.fileno socket) -1)
          (info :closing (py->lisp (.getsockname socket)))
          (.shutdown socket socket/SHUT_RDWR)
          (.close socket))))
    (.server-close server)))

(defn server-make
  "Create a `socketserver/TCPServer` serving nREPL clients
  according to ``opts`` at 127.0.0.1 at a random available port.

  New client connections are handled by `on-connect`, of which see.

  See `ops` for the operation supported by the server.

  ``opts`` is a map of options with the following optional keys

  :async? If truthy, `on-connect` `on-connect` queues client requests
  in a `work*` registry instead of executing them immediately.

  :host The host address to bind to, defaults to 127.0.0.1.

  :port The port number to listen to, defaults to 0 which means to
  pickup a random available port.

  It returns a map with the following keys

  :error Contains details of any error during server creation.

  :server The `socketserver/ThreadingTCPServer` server object.

  :shutdown-fn A function to gracefully shut down the server.

  :work-fn If :async? is truthy, this is the function to process
  pending client `work*`.

  See `on-connect!` for additionally supported ``opts`` keys.

  Known limitations:

  1. All client connections share the same environment at the moment,
  which is the env that the server runs in. This could change in the
  future to isolate the clients interactions from each other.

  2. The session uuids are ignored and only created to satisfy the
  initial clone op."
  [opts]
  (u/with-eprotect :server-make-error
    (let [{:keys [async? host port] :or {host "127.0.0.1" port 0}} opts
          work* (when async? (work*-make))
          opts (cond-> opts
                 async?
                 (assoc :work* work*))
          handler (python/type (name (gensym "nREPLTCPHandler")) (python/tuple [socketserver/StreamRequestHandler])
                               #py {"handle" #(on-connect! % opts)})
          server (socketserver/ThreadingTCPServer (python/tuple [host port]) handler)]
      (set! (.-daemon-threads server) true)
      (cond-> {:server server
               :shutdown-fn #(server-shutdown! server work*)}
        async?
        (assoc :work-fn #(clients-work-do! work*))))))

(def ^:private nrepl-server-signature
  "The de facto signature nrepl started message that is used by IDEs to
  identify the host and port number the server is running on."
  "nREPL server started on port %s on host %s - nrepl://%s:%s")

(defn- server-serve!
  "Blocking call to serve `server` requests, with graceful error
  handling.

  It returns a map with the following key on error

  :error Contains the details of the error."
  [server]
  (try
    (.serve-forever server)
    (catch python/KeyboardInterrupt _e
      (println "Exiting in response to a keyboard interrupt..."))
    (catch python/Exception e
      (let [error (u/error-make :nrepl-server-server-error e)]
        (err (u/error->str error))
        {:error error}))))

(defn start-server!
  "Create an nREPL server with `server-make` (of which see) according to
  ``opts`` if given, and blocks for serving clients.

  It prints out the `nrepl-server-signature` message at startup for
  IDEs to pickup the host number to connect to.

  ``opts`` is a map of options with the following optional keys

  :async? If truthy, runs the server non-blocking in a separate thread
  where requests are queued instead of executed immediately. Returns a
  map with

           :error :error Contains details of any error during server
           creation.

           :host The host interface the server is bound to.

           :port The local port the server is listening on.

           :shutdown-fn The function to shutdown the server.

           :work-fn The function to process any pending client
           requests.

  :nrepl-port-file An optional filepath to write the port number
  to. Typically set to .nrepl-port for the editors to detect.

  :server* An optional promise of a map delivered on success with

           :host The host interface the server is bound to.

           :port The local port the server is listening on.

           :shutdown-fn The function to shutdown the server.

  also see `server-make` for additionally supported ``opts`` keys."
  ([]
   (start-server! {}))
  ([opts]
   (let [{:keys [nrepl-port-file  async? server*] :as k
          :or   {nrepl-port-file ".nrepl-port"}} opts
         port-file-path (when nrepl-port-file
                          (try (os.path/abspath nrepl-port-file)
                               (catch python/Exception _
                                 nil)))]
     (u/with-eprotect :start-server-error :on-err-str #(err %)
       (with [port-file (if port-file-path
                          (python/open port-file-path "w")
                          (contextlib/nullcontext))]
             (let [{:keys [error server shutdown-fn work-fn]} (server-make opts)]
               (if error
                 {:error error}

                 (let [[host port] (py->lisp (.-server-address server))
                       port-file-path (when port-file-path
                                        (try
                                          (.write port-file (str port))
                                          (.flush port-file)
                                          port-file-path
                                          (catch Exception e
                                            (warn :nrepl-start-error :can-t-write-to-port-file-at nrepl-port-file e)
                                            nil)))]
                   (binding [*out* sys/stdout]
                     (println (format nrepl-server-signature port host host port)))

                   (if async?
                     ;; the server thread has to be a
                     ;; `threading/Thread`, not a `future`, for the
                     ;; application not to hang on exit.
                     (let [server-thread (threading/Thread
                                          **
                                          :daemon true
                                          :target #(u/with-eprotect :nrepl-server-async-fut
                                                     (server-serve! server)))]
                       (.start server-thread)
                       (cond-> {:host host
                                :port port
                                :server-thread_ server-thread
                                :shutdown-fn shutdown-fn
                                :work-fn work-fn}
                         nrepl-port-file
                         (assoc :nrepl-port-file port-file-path)))

                     (do
                       (when server* (deliver server* {:host host
                                                       :port port
                                                       :shutdown-fn shutdown-fn}))
                       (server-serve! server)))))))))))
